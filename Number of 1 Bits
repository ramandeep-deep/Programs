Write a function that takes an unsigned integer and returns the number of '1' bits it has (also known as the Hamming weight).

Note:

Note that in some languages such as Java, there is no unsigned integer type. In this case, the input will be given as a signed integer type. It should not affect your implementation, as the integer's internal binary representation is the same, whether it is signed or unsigned.
In Java, the compiler represents the signed integers using 2's complement notation. Therefore, in Example 3 above, the input represents the signed integer. -3.

Solution:
Brian Kernighan 's Solution


public class Solution {
    // you need to treat n as an unsigned value
    public int hammingWeight(int n) {
        int res=0;
        while(n != 0){
            n= (n & (n-1));
                res++;
        }
        return res;
    }
} 


//comments
// time complexity equal to O(no.of set bits)
/*
eg we have n =  40         i.e      101000  4th bit from right side  is removed
   (n-1)        39         i.e      100111
   subtracting it we have 32        100000
   now further   32   100000 in output 1 bit i.e set bit from right is removed.
   n-1 i.e 31         011111
   subracting we get  000000     

*/
